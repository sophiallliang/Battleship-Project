import express, { Request, Response } from "express";
import { Game, Score, User } from "./database/models";
import { signin, signup } from "./services/auth_service";
import formatResp, { errorResp, okResp } from "./utils/formatResp";
import { STATUS_ERROR } from "./utils/constants";
import { RespType } from "./utils/types";
import logger from "./logger/logger";
import { LogLevels } from "./logger/constants";
import cors from 'cors';
import { getAllScores } from "./services/score_service";
import { createGame, doGameAction, getAllGameInfo, getGameState, joinGame } from "./services/game_service";
import { authorizeJwt, softAuthorizeJwt } from "./middlewares/auth_middleware";
import { BOARD_SIZE } from "./algorithms/constants";
const app = express();

app.use(cors());
app.use(express.json());


app.get("/", (req: Request, resp: Response) => {
    resp.send("Project 3 backend service");
});

app.post("/api/signup", async (req: Request, resp: Response) => {
    const username = req.body.username;
    const password = req.body.password;
    const email = req.body.email;
    if (!username || !password) {
        logger.log("req body must have non - empty username and password", LogLevels.ERROR);
        resp.status(400).send(errorResp("must have non - empty username and password"));
        return;
    }
    const result: RespType = await signup(username, password, email);
    if ("fatal" in result) {
        resp.status(500).send(result);
    } else {
        resp.send(result);
    }
});

app.post("/api/signin", async (req: Request, resp: Response) => {
    const username = req.body.username;
    const password = req.body.password;
    if (!username || !password) {
        logger.log("req body must have non - empty username and password", LogLevels.ERROR);
        resp.status(400).send(errorResp("must have non - empty username and password"));
        return;
    }
    const result: RespType = await signin(username, password);
    if ("fatal" in result) {
        resp.status(500).send(result);
    } else {
        resp.send(result);
    }
})

app.get("/api/scores", async (req: Request, resp: Response) => {
    const result: RespType = await getAllScores();
    if ("fatal" in result) {
        resp.status(500).send(result);
    } else {
        resp.send(result);
    }
})

app.post("/api/create_game", [authorizeJwt], async (req: Request, resp: Response) => {
    const username = req.body.username; // generated by auth middleware
    const gamename = req.body.gamename;
    
    if (!username) {
        logger.log("Authorization error", LogLevels.ERROR);
        resp.status(400).send(errorResp("Authorization error"));
        return;
    }
    if (!gamename) {
        logger.log("req body must have non - empty gamename", LogLevels.ERROR);
        resp.status(400).send(errorResp("req body must have non - empty gamename"));
        return;
    }
    let result = await createGame(username, gamename);
    if ("fatal" in result) {
        resp.status(500).send(result);
    } else if ("error" in result 
    && result.message === `User ${username} is not found while creating game`){
        resp.status(400).send(result);
    } else {
        resp.send(result);
    }
})

app.put("/api/join_game", [authorizeJwt], async (req: Request, resp: Response) => {
    const game_id = req.body.game_id;
    const username = req.body.username; // generated by auth middleware
    if (!username) {
        logger.log("Authorization error", LogLevels.ERROR);
        resp.status(400).send(errorResp("Authorization error"));
        return;
    }
    if (!game_id) {
        logger.log("req body must have non - empty game_id", LogLevels.ERROR);
        resp.status(400).send(errorResp("req body must have non - empty game_id"));
        return;
    }
    const result = await joinGame(username, game_id);
    if ("fatal" in result) {
        resp.status(500).send(result);
    } else if ("error" in result) {
        resp.status(400).send(result);
    } else {
        resp.send(result);
    }
})

app.put("/api/game_action", [authorizeJwt], async (req: Request, resp: Response) => {
    const username = req.body.username; // generated by auth middleware
    const game_id = req.body.game_id;
    const action = req.body.action;
    if (!username) {
        logger.log("Authorization error", LogLevels.ERROR);
        resp.status(400).send(errorResp("Authorization error"));
        return;
    }
    if (!game_id || typeof action !== 'number') {
        logger.log("req body must have non - empty game_id and action", LogLevels.ERROR);
        resp.status(400).send(errorResp("req body must have non - empty game_id and action"));
        return;
    }
    if (action < 0 || action >= BOARD_SIZE) {
        logger.log(`invalid action: action must between 0 and ${BOARD_SIZE}`, LogLevels.ERROR);
        resp.status(400).send(errorResp(`invalid action: action must between 0 and ${BOARD_SIZE}`));
        return;
    }
    const result = await doGameAction(username, game_id, action);
    if ("fatal" in result) {
        resp.status(500).send(result);
    } else if ("error" in result) {
        resp.status(400).send(result);
    } else {
        resp.send(result);
    }
})

app.get("/api/game_state", [softAuthorizeJwt], async (req: Request, resp: Response) => {
    const game_id = req.query.game_id;
    if (!game_id) {
        logger.log("req must have a game_id query parameter", LogLevels.ERROR);
        resp.status(400).send(errorResp("req must have a game_id query parameter"));
        return;
    }
    const result = await getGameState(game_id as string, req.body.username);
    if ("fatal" in result) {
        resp.status(500).send(result);
    } else if ("error" in result) {
        resp.status(400).send(result);
    } else {
        resp.send(result);
    }
})

app.get("/api/all_game_info", [softAuthorizeJwt], async (req: Request, resp: Response) => {
    const username = req.body.username;
    const result = await getAllGameInfo(username);
    if ("fatal" in result) {
        resp.status(500).send(result);
    } else {
        resp.send(result);
    }
})

app.get("/api/test", [authorizeJwt], async (req: any, resp: any) => {
    resp.send(okResp("auth pass."));
});

export default app;